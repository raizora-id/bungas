{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/apps/erp/instrumentation.ts"],"sourcesContent":["import { diag, DiagConsoleLogger, DiagLogLevel } from '@opentelemetry/api';\nimport { registerOTel } from '@vercel/otel';\nimport { AlwaysOnSampler, TraceIdRatioBasedSampler } from '@opentelemetry/sdk-trace-node';\n\nconst isDev = process.env.NODE_ENV === 'development';\nconst hasOTLPEndpoint = !!process.env.OTEL_EXPORTER_OTLP_ENDPOINT;\n\nexport function register() {\n  diag.setLogger(new DiagConsoleLogger(), isDev ? DiagLogLevel.ALL : DiagLogLevel.ERROR);\n\n  registerOTel({\n    serviceName: '@rac/erp',\n    traceSampler: isDev\n      ? new AlwaysOnSampler()\n      : new TraceIdRatioBasedSampler(0.1),\n    ...(hasOTLPEndpoint\n      ? ({\n        otlpExporterConfig: {\n          url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT!,\n        },\n      } as any)\n      : {}),\n  });\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,QAAQ,oDAAyB;AACvC,MAAM,kBAAkB,CAAC,CAAC,QAAQ,GAAG,CAAC,2BAA2B;AAE1D,SAAS;IACd,gLAAA,CAAA,OAAI,CAAC,SAAS,CAAC,IAAI,gLAAA,CAAA,oBAAiB,IAAI,uCAAQ,gLAAA,CAAA,eAAY,CAAC,GAAG;IAEhE,CAAA,GAAA,8JAAA,CAAA,eAAY,AAAD,EAAE;QACX,aAAa;QACb,cAAc,uCACV,IAAI,qLAAA,CAAA,kBAAe;QAEvB,GAAI,kBACC;YACD,oBAAoB;gBAClB,KAAK,QAAQ,GAAG,CAAC,2BAA2B;YAC9C;QACF,IACE,CAAC,CAAC;IACR;AACF"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/apps/erp/edge-wrapper.js"],"sourcesContent":["self._ENTRIES ||= {};\nconst modProm = import('MODULE');\nmodProm.catch(() => {});\nself._ENTRIES[\"middleware_instrumentation\"] = new Proxy(modProm, {\n    get(modProm, name) {\n        if (name === \"then\") {\n            return (res, rej) => modProm.then(res, rej);\n        }\n        let result = (...args) => modProm.then((mod) => (0, mod[name])(...args));\n        result.then = (res, rej) => modProm.then((mod) => mod[name]).then(res, rej);\n        return result;\n    },\n});\n"],"names":[],"mappings":"AAAA,KAAK,QAAQ,KAAK,CAAC;AACnB,MAAM;AACN,QAAQ,KAAK,CAAC,KAAO;AACrB,KAAK,QAAQ,CAAC,6BAA6B,GAAG,IAAI,MAAM,SAAS;IAC7D,KAAI,OAAO,EAAE,IAAI;QACb,IAAI,SAAS,QAAQ;YACjB,OAAO,CAAC,KAAK,MAAQ,QAAQ,IAAI,CAAC,KAAK;QAC3C;QACA,IAAI,SAAS,CAAC,GAAG,OAAS,QAAQ,IAAI,CAAC,CAAC,MAAQ,CAAC,GAAG,GAAG,CAAC,KAAK,KAAK;QAClE,OAAO,IAAI,GAAG,CAAC,KAAK,MAAQ,QAAQ,IAAI,CAAC,CAAC,MAAQ,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK;QACvE,OAAO;IACX;AACJ"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}